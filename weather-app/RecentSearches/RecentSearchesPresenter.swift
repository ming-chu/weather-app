//
//  RecentSearchesPresenter.swift
//  weather-app
//
//  Created Ming Chu on 22/11/2019.
//  Copyright © 2019 vegantell. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class RecentSearchesPresenter: RecentSearchesPresenterProtocol {

    weak private var view: RecentSearchesViewProtocol?
    var interactor: RecentSearchesInteractorInputProtocol?
    private let router: RecentSearchesWireframeProtocol

    private (set) var searchRecords: [SearchRecord] = []

    init(interface: RecentSearchesViewProtocol, interactor: RecentSearchesInteractorInputProtocol?, router: RecentSearchesWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

    // MARK: - RecentSearchesPresenterProtocol
    func requestFetchSearchHistory() {
        self.interactor?.requestFetchHistoryService()
    }

    func requestRemoveSearchRecord(recordId: String) {
        guard let record = SearchHistoryManager.shared.getRecord(recordId: recordId) else { return }
        self.interactor?.removeSearchRecord(record: record)
        self.requestFetchSearchHistory()
    }

    func requestRemoveAllSearchRecord() {
        self.interactor?.removeAllSearchRecord()
    }

    func requestPerformSearch(recordId: String) {
        guard let record = SearchHistoryManager.shared.getRecord(recordId: recordId) else { return }
        self.router.presentSearch(record: record)
    }
}

extension RecentSearchesPresenter: RecentSearchesInteractorOutputProtocol {
    func fetchSearchHistoryDidSuccess(records: [SearchRecord]) {
        self.searchRecords = records.reversed()
        self.view?.updateSearchHistory(records: records)
    }

    func fetchSearchHistoryDidFailed(error: Error?) {
        logger.debug("fetchSearchHistoryDidFailed: \(String(describing: error))")
    }
}
