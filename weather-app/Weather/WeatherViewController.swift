//
//  WeatherViewController.swift
//  weather-app
//
//  Created Ming Chu on 20/11/2019.
//  Copyright © 2019 vegantell. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Kingfisher
import RxSwift
import RxCocoa

class WeatherViewController: UIViewController {
    
    @IBOutlet private weak var searchBar: UISearchBar?
    @IBOutlet private weak var weatherWidgetView: UIView?
    @IBOutlet private weak var cityNameLabel: UILabel?
    @IBOutlet private weak var weatherDescriptionLabel: UILabel?
    @IBOutlet private weak var weatherIconImageView: UIImageView?
    @IBOutlet private weak var temperatureLabel: UILabel?
    @IBOutlet private weak var windValueLabel: UILabel?
    @IBOutlet private weak var humidityValueLabel: UILabel?
    @IBOutlet private weak var pressureValueLabel: UILabel?
    @IBOutlet private weak var datetimeLable: UILabel?

    var presenter: WeatherPresenterProtocol?

    private let searchText = BehaviorRelay<String?>(value: nil)
    private let disposeBag = DisposeBag()

	override func viewDidLoad() {
        super.viewDidLoad()

        self.setInterface(viewModel: nil)
        self.searchBar?.rx.text.asDriver().drive(searchText).disposed(by: self.disposeBag)

        self.presenter?.requestCurrentWeather(keyword: "Hong Kong")

        searchText
            .throttle(RxTimeInterval.milliseconds(300), scheduler: MainScheduler.instance)
            .debounce(RxTimeInterval.milliseconds(500), scheduler: MainScheduler.instance)
            .subscribe(onNext: { (searchText) in
                guard let searchText = searchText, !searchText.isEmpty else { return }
                logger.debug("SearchText: \(String(describing: searchText))")
                self.presenter?.requestCurrentWeather(keyword: searchText)

            })
            .disposed(by: self.disposeBag)
    }

    private func setInterface(viewModel: WeatherViewModelProtocol?) {
        self.cityNameLabel?.text = viewModel?.cityName
        self.weatherDescriptionLabel?.text = viewModel?.weatherDescription
        self.temperatureLabel?.text = viewModel?.temperature
        self.windValueLabel?.text = viewModel?.windSpeed
        self.humidityValueLabel?.text = viewModel?.humidity
        self.pressureValueLabel?.text = viewModel?.pressure
        self.datetimeLable?.text = viewModel?.datetime
        self.weatherIconImageView?.kf.setImage(with: viewModel?.weatherIconUrl)
        self.weatherWidgetView?.isHidden = viewModel == nil
    }


}

extension WeatherViewController: WeatherViewProtocol {
    func updateCurrentWeather(viewModel: WeatherViewModelProtocol) {
        // Update UI
        self.setInterface(viewModel: viewModel)
    }

    func showError(errorMessage: String) {
        //TODO: show error
    }
}
