//
//  WeatherViewController.swift
//  weather-app
//
//  Created Ming Chu on 20/11/2019.
//  Copyright © 2019 vegantell. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Kingfisher
import RxSwift
import RxCocoa

class WeatherViewController: UIViewController {
    
    @IBOutlet private weak var searchBar: UISearchBar?
    @IBOutlet private weak var weatherWidgetView: UIView?
    @IBOutlet private weak var cityNameLabel: UILabel?
    @IBOutlet private weak var weatherDescriptionLabel: UILabel?
    @IBOutlet private weak var weatherIconImageView: UIImageView?
    @IBOutlet private weak var temperatureLabel: UILabel?
    @IBOutlet private weak var windValueLabel: UILabel?
    @IBOutlet private weak var humidityValueLabel: UILabel?
    @IBOutlet private weak var pressureValueLabel: UILabel?
    @IBOutlet private weak var datetimeLable: UILabel?
    @IBOutlet private weak var errorLabel: UILabel?
    @IBOutlet private weak var gpsSearchButton: UIButton?

    var presenter: WeatherPresenterProtocol?

    private let searchText = BehaviorRelay<String?>(value: nil)
    private let disposeBag = DisposeBag()

	override func viewDidLoad() {
        super.viewDidLoad()

        self.setInterface(viewModel: nil)
        self.searchBar?.rx.text.asDriver().drive(searchText).disposed(by: self.disposeBag)

        // Search for Hong Kong by default for now
        self.presenter?.requestWeatherSearch(keyword: "Hong Kong")

        searchText
            .throttle(RxTimeInterval.milliseconds(300), scheduler: MainScheduler.instance)
            .debounce(RxTimeInterval.milliseconds(500), scheduler: MainScheduler.instance)
            .subscribe(onNext: { [weak self] (searchText) in
                guard let searchText = searchText, !searchText.isEmpty else { return }
                logger.debug("SearchText: \(String(describing: searchText))")
                self?.presenter?.requestWeatherSearch(keyword: searchText)

            })
            .disposed(by: self.disposeBag)

        // observe the GPS search button event to trigger a "Weather Search" using GPS
        gpsSearchButton?.rx.controlEvent(.touchUpInside)
            .throttle(RxTimeInterval.seconds(2), scheduler: MainScheduler.instance)
            .subscribe(onNext: { [weak self] (_) in
                self?.presenter?.requestGPSWeatherSearch()
            })
            .disposed(by: self.disposeBag)
    }

    private func setInterface(viewModel: WeatherViewModelProtocol?) {
        self.cityNameLabel?.text = viewModel?.cityName
        self.weatherDescriptionLabel?.text = viewModel?.weatherDescription
        self.temperatureLabel?.text = viewModel?.temperature
        self.windValueLabel?.text = viewModel?.windSpeed
        self.humidityValueLabel?.text = viewModel?.humidity
        self.pressureValueLabel?.text = viewModel?.pressure
        self.datetimeLable?.text = viewModel?.datetime
        self.weatherIconImageView?.kf.setImage(with: viewModel?.weatherIconUrl)
        self.errorLabel?.alpha = 0
        self.weatherWidgetView?.isHidden = viewModel == nil
    }

    private func presentError(errorMessage: String) {
        self.errorLabel?.text = errorMessage
        self.errorLabel?.alpha = 0

        UIViewPropertyAnimator.runningPropertyAnimator(withDuration: 0.3, delay: 0, animations: {
            self.errorLabel?.alpha = 1
        }, completion: { [weak self] position in
            UIViewPropertyAnimator.runningPropertyAnimator(withDuration: 0.3, delay: 2.5, animations: {
                self?.errorLabel?.alpha = 0
            }, completion: nil)
        })
    }
}

extension WeatherViewController: WeatherViewProtocol {
    func updateCurrentWeather(viewModel: WeatherViewModelProtocol) {
        // Update UI
        self.setInterface(viewModel: viewModel)
    }

    func showError(errorMessage: String) {
        logger.debug(errorMessage)
        self.presentError(errorMessage: errorMessage)
    }
}
